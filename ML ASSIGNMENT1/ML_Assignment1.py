# -*- coding: utf-8 -*-
"""ML_lab1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gYq5IXS7BpIjjpZDCcBAwGcA6CyjjMd0
"""

#Q1 a)
import numpy as np
arr = np.array([1,2,3,6,4,5])
result = arr[::-1];
print(str(result))

#Q1 b)
import numpy as np
array1 = np.array([[1, 2, 3], [2, 4, 5], [1, 2, 3]])
array1.flatten()
array1.ravel()

#Q1 c)
import numpy as np
arr1 = np.array([[1, 2], [3, 4]])
arr2 = np.array([[1, 2], [3, 4]])
np.array_equal(arr1,arr2)

#Q1 d) i.
import numpy as np
x = np.array([1,2,3,4,5,1,2,1,1,1])
y1 = np.bincount(x);
maximum = max(y1);
print(y1.argmax())
m=[]

for i in range(len(y1)):
  if y1[i]==maximum:
    m.append(i)

    for i in range(len(x)):
      for j in range(len(m)):
        if x[i]==m[j]:
          print(m[j]," ",i)

#Q1 d) ii.
import numpy as np
y = np.array([1, 1, 1, 2, 3, 4, 2, 4, 3, 3, ])
y1 = np.bincount(y);
maximum = max(y1);
print(y1.argmax())
m=[]

for i in range(len(y1)):
  if y1[i]==maximum:
    m.append(i)

    for i in range(len(y)):
      for j in range(len(m)):
        if y[i]==m[j]:
          print(m[j]," ",i)

#Q1 e) i.
import numpy as np 
gfg = np.matrix('[4, 1, 9; 12, 3, 1; 4, 5, 6]')
np.sum(gfg)

#Q1 e) ii.
import numpy as np 
gfg = np.matrix('[4, 1, 9; 12, 3, 1; 4, 5, 6]')
np.sum(gfg, axis=1)

#Q1 e) iii.
import numpy as np 
gfg = np.matrix('[4, 1, 9; 12, 3, 1; 4, 5, 6]')
np.sum(gfg, axis=0)

#Q1 f) i.
n_array = np.array([[55, 25, 15],[30, 44, 2],[11, 45, 77]])
trace = np.trace(n_array)
print(trace)

#Q1 f) i. ii.
import numpy as np
n_array = np.array([[55, 25, 15],[30, 44, 2],[11, 45, 77]])
w, v = np.linalg.eig(n_array)
print("Eigen values of the given array:\n",w)
print("Eigen vectors of the given array:\n",v)

#Q1 f) iii.
import numpy as np
n_array = np.array([[55, 25, 15],[30, 44, 2],[11, 45, 77]])
y = np.linalg.inv(n_array)
print(y)

#Q1 f) iv.
import numpy as np
n_array = np.array([[55, 25, 15],[30, 44, 2],[11, 45, 77]])
y = np.linalg.det(n_array)
print(y)

#Q1 g) i.
import numpy as np
p = [[1, 2], [2, 3]]
q = [[4, 5], [6, 7]]
res = np.dot(p,q)
print("res is:",res)
np.cov(p,q)

#Q1 g) ii.
import numpy as np
p = [[1, 2], [2, 3], [4, 5]]
q = [[4, 5, 1], [6, 7, 2]]
res = np.dot(p,q)
q=np.reshape(q,(3,2))
print("res is:",res)
np.cov(p,q)

#Q1 h) 
import numpy as np
x = np.array([[2, 3, 4], [3, 2, 9]])
y = np.array([[1, 5, 0], [5, 10, 3]])
a = np.inner(x,y)
print("inner product is ",x)
b = np.outer(x,y)
print("outer product is ",b)
c = np.cross(x,y)
print("cartesian product is",c)

#Q2 a) i. 
import numpy as np
array = np.array([[1, -2, 3],[-4, 5, -6]])
res = np.absolute(array)
print(res)

#Q2 a) ii.
import numpy as np
arr = np.array([[1, -2, 3],[-4, 5, -6]])

# Percentile of the flattened array
print("25th Percentile of arr ",np.percentile(arr, 25))
print("50th Percentile of arr ",np.percentile(arr, 50))
print("75th Percentile of arr ",np.percentile(arr, 75))
    
# Percentile of each column
print("25th Percentile of arr ",np.percentile(arr, 25, axis =0))
print("50th Percentile of arr ",np.percentile(arr, 50, axis =0))
print("75th Percentile of arr ",np.percentile(arr, 75, axis =0))

# Percentile of each row
print("25th Percentile of arr ",np.percentile(arr, 25, axis =1))
print("50th Percentile of arr ",np.percentile(arr, 50, axis =1))
print("75th Percentile of arr ",np.percentile(arr, 75, axis =1))

#Q2 a) iii.
import numpy as np
arr = np.array([[1, -2, 3],[-4, 5, -6]])

# Percentile of the flattened array
print("25th mean of arr ",np.mean(arr))
print("50th median of arr ",np.median(arr))
print("75th std of arr ",np.std(arr))
    
# Percentile of each column
print("25th mean of arr ",np.mean(arr, axis =0))
print("50th median of arr ",np.median(arr, axis =0))
print("75th std of arr ",np.std(arr, axis =0))

# Percentile of each row
print("25th mean of arr ",np.mean(arr, axis =1))
print("50th median of arr ",np.median(arr, axis =1))
print("75th std of arr ",np.std(arr, axis =1))

#Q2 b)
import numpy as np
x = np.array([-1.8, -1.6, -0.5, 0.5,1.6, 1.8, 3.0])
r1 = np.floor(x)
r2 = np.ceil(x)
r3 = np.trunc(x)
r4 = np.around(x)
print("floor: ",r1)
print("ceil:  ",r2)
print("trunc: ",r3)
print("round: ",r4)

#Q3 a) i.
import numpy as np
array = np.array([10, 52, 62, 16, 16, 54, 453])
print(np.sort(array))

#Q3 a) ii.
import numpy as np
array = np.array([10, 52, 62, 16, 16, 54, 453])
indices = np.argsort(array)
print(indices)

#Q3 a) iii.
import numpy as np
array = np.array([10, 52, 62, 16, 16, 54, 453])
array1 = np.sort(array)
print(4, "smallest elements of the array")
print(array1[:4])

#Q3 a) iv.
import numpy as np
array = np.array([10, 52, 62, 16, 16, 54, 453])
array1 = np.sort(array)
print(5, "largest elements of the array")
print(array1[-5:])

#Q3 b) i.
import numpy as np

def isInt(num):
    return np.equal(np.mod(num, 1), 0)

arr = np.array([1.0, 2.3, 3, 4.0, 4.001])

for num in arr:
    if isInt(num):
        print(num, "is an integer")

#Q3 b) ii.
import numpy as np

def isfloat(num):
    return np.not_equal(np.mod(num, 1), 0)

arr = np.array([1.0, 2.3, 3, 4.0, 4.001])

for num in arr:
    if isfloat(num):
        print(num, "is an float")

#Q4 a)
import numpy as np
import cv2
img1 = cv2.imread("/content/image/donuts.png",0)
np.savetxt("File1.txt",img1)

img2 = cv2.imread("/content/image/donuts.png",1)
img2=img2.reshape(img2.shape[0],-1)
np.savetxt("File2.txt",img2)

#Q4 b)
loaded_img1=np.loadtxt("/content/File1.txt")
loaded_img2=np.loadtxt("/content/File2.txt")